apiVersion: v1
kind: ServiceAccount
metadata:
  name: spin-sa
  namespace: spinnaker
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: configmap-modifier
  namespace: spinnaker
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spin-cluster-role
rules:
- apiGroups:
  - extensions
  resources:
  - ingresses
  - ingresses/status
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  - ingresses/status
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  - endpoints
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - services
  - services/finalizers
  - events
  - configmaps
  - secrets
  - namespaces
  - jobs
  verbs:
  - create
  - get
  - list
  - update
  - watch
  - patch
  - delete
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - create
  - get
  - list
  - update
  - watch
  - patch
- apiGroups:
  - apps
  - extensions
  resources:
  - deployments
  - deployments/finalizers
  - deployments/scale
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - create
  - get
  - list
  - update
  - watch
  - patch
  - delete
- apiGroups:
  - monitoring.coreos.com
  resources:
  - servicemonitors
  verbs:
  - get
  - create
- apiGroups:
  - spinnaker.armory.io
  resources:
  - '*'
  - spinnakerservices
  verbs:
  - create
  - get
  - list
  - update
  - watch
  - patch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: opa-configmap-modifier
  namespace: spinnaker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: configmap-modifier
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts:spinnaker
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: opa-viewer-spinnaker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: view
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts:spinnaker
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spin-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spin-cluster-role
subjects:
- kind: ServiceAccount
  name: spin-sa
  namespace: spinnaker
---
apiVersion: v1
data:
  mysqld.cnf: |
    # The MySQL  Server configuration file.
    [mysqld]
    pid-file        = /var/run/mysqld/mysqld.pid
    socket          = /var/run/mysqld/mysqld.sock
    datadir         = /var/lib/mysql
    #log-error      = /var/log/mysql/error.log
    # Accept all incoming connections
    bind-address    = 0.0.0.0
    # Disabling symbolic-links is recommended to prevent assorted security risks
    symbolic-links=0
    max_allowed_packet=500M
kind: ConfigMap
metadata:
  name: mysql-config
  namespace: spinnaker
---
apiVersion: v1
data:
  clouddriver.sh: |
    #!/bin/bash -xe
    echo "Creating Clouddriver DB..."
    mysql -u root -p${MYSQL_ROOT_PASSWORD} -e \
      "CREATE SCHEMA IF NOT EXISTS clouddriver DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; \
      CREATE USER IF NOT EXISTS 'clouddriver_service'@'%' IDENTIFIED BY '${MYSQL_CD_PASSWORD}'; \
      CREATE USER IF NOT EXISTS 'clouddriver_migrate'@'%' IDENTIFIED BY '${MYSQL_CD_MIGRATE_PASSWORD}'; \
      GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, EXECUTE, SHOW VIEW ON clouddriver.* TO 'clouddriver_service'@'%'; \
      GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, LOCK TABLES, EXECUTE, SHOW VIEW ON clouddriver.* TO clouddriver_migrate@'%'; \
      CREATE SCHEMA IF NOT EXISTS orca DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; \
      CREATE USER IF NOT EXISTS 'orca_service'@'%' IDENTIFIED BY '${MYSQL_ORCA_PASSWORD}'; \
      CREATE USER IF NOT EXISTS 'orca_migrate'@'%' IDENTIFIED BY '${MYSQL_ORCA_MIGRATE_PASSWORD}'; \
      GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, EXECUTE, SHOW VIEW ON orca.* TO 'orca_service'@'%'; \
      GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, LOCK TABLES, EXECUTE, SHOW VIEW ON orca.* TO orca_migrate@'%'; \
      CREATE SCHEMA IF NOT EXISTS front50 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; \
      CREATE USER IF NOT EXISTS 'front50_service'@'%' IDENTIFIED BY '${MYSQL_F50_PASSWORD}'; \
      CREATE USER IF NOT EXISTS 'front50_migrate'@'%' IDENTIFIED BY '${MYSQL_F50_MIGRATE_PASSWORD}'; \
      GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, EXECUTE, SHOW VIEW ON front50.* TO 'front50_service'@'%'; \
      GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, LOCK TABLES, EXECUTE, SHOW VIEW ON front50.* TO front50_migrate@'%';"
kind: ConfigMap
metadata:
  name: mysql-init-db
  namespace: spinnaker
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: spinnaker
spec:
  ports:
  - port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    app: minio
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: spinnaker
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: opa
  namespace: spinnaker
spec:
  ports:
  - port: 8181
    protocol: TCP
    targetPort: 8181
  selector:
    app: opa
---
apiVersion: v1
kind: Service
metadata:
  labels: null
  name: spin-agent-clouddriver
  namespace: spinnaker
spec:
  ports:
  - name: grpc
    port: 9091
    protocol: TCP
    targetPort: 9091
  selector:
    app: spin
    cluster: spin-clouddriver
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: opa
  name: opa-deployment
  namespace: spinnaker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opa
  template:
    metadata:
      labels:
        app: opa
    spec:
      containers:
      - args:
        - run
        - --server
        - --addr=http://0.0.0.0:8181
        image: openpolicyagent/opa:0.13.1
        livenessProbe:
          httpGet:
            path: /health
            port: 8181
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 5
        name: opa
        readinessProbe:
          httpGet:
            path: /health
            port: 8181
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 5
      - args:
        - --policies=spinnaker
        image: openpolicyagent/kube-mgmt:0.9
        name: kube-mgmt
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio
  namespace: spinnaker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  serviceName: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - mkdir -p /storage/spinnaker && /usr/bin/minio server /storage
        env:
        - name: MINIO_ACCESS_KEY
          value: minio
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: minioAccessKey
              name: spin-secrets
        image: minio/minio
        name: minio
        ports:
        - containerPort: 9000
        volumeMounts:
        - mountPath: /storage
          name: storage
      securityContext:
        fsGroup: 65535
        runAsGroup: 65535
        runAsUser: 1000
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: minio-pvc
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: spinnaker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - args:
        - --ignore-db-dir=lost+found
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysqlRootPassword
              name: spin-secrets
        - name: MYSQL_CD_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysqlCdPassword
              name: spin-secrets
        - name: MYSQL_CD_MIGRATE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysqlCdMigratePassword
              name: spin-secrets
        - name: MYSQL_ORCA_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysqlOrcaPassword
              name: spin-secrets
        - name: MYSQL_ORCA_MIGRATE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysqlOrcaMigratePassword
              name: spin-secrets
        - name: MYSQL_F50_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysqlF50Password
              name: spin-secrets
        - name: MYSQL_F50_MIGRATE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysqlF50MigratePassword
              name: spin-secrets
        image: mysql:5.7
        name: mysql
        ports:
        - containerPort: 3306
          name: mysql
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-persistent-storage
        - mountPath: /docker-entrypoint-initdb.d
          name: init-db
        - mountPath: /etc/mysql/mysql.conf.d
          name: mysql-config
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
      - configMap:
          name: mysql-init-db
        name: init-db
      - configMap:
          name: mysql-config
        name: mysql-config
---
apiVersion: spinnaker.armory.io/v1alpha2
kind: SpinnakerService
metadata:
  name: spinnaker
  namespace: spinnaker
spec:
  expose:
    service:
      overrides:
        deck:
          publicPort: 9000
        gate:
          publicPort: 8084
      type: LoadBalancer
    type: service
  kustomize:
    clouddriver:
      deployment:
        patchesStrategicMerge:
        - |
          spec:
            template:
              spec:
                initContainers:
                  - name: policy-engine-install
                    image: armory/policy-engine-plugin:0.1.6
                    imagePullPolicy: Always
                    args:
                      - -install-path
                      - /opt/policy-engine-plugin/target
                    volumeMounts:
                      - mountPath: /opt/policy-engine-plugin/target
                        name: policy-engine-plugin-vol
                  - name: kubesvc-plugin
                    image: docker.io/armory/kubesvc-plugin:0.9.12
                    volumeMounts:
                      - mountPath: /opt/plugin/target
                        name: kubesvc-plugin-vol
                containers:
                  - name: clouddriver
                    volumeMounts:
                      - mountPath: /opt/clouddriver/lib/plugins
                        name: kubesvc-plugin-vol
                      - mountPath: /opt/spinnaker/lib/local-plugins
                        name: policy-engine-plugin-vol
                volumes:
                  - name: policy-engine-plugin-vol
                    emptyDir: {}
                  - name: kubesvc-plugin-vol
                    emptyDir: {}
    deck: {}
    echo: {}
    front50:
      deployment:
        patchesStrategicMerge:
        - |
          spec:
            template:
              spec:
                initContainers:
                  - name: policy-engine-install
                    image: armory/policy-engine-plugin:0.1.6
                    imagePullPolicy: Always
                    args:
                      - -install-path
                      - /opt/policy-engine-plugin/target
                    volumeMounts:
                      - mountPath: /opt/policy-engine-plugin/target
                        name: policy-engine-plugin-vol
                containers:
                  - name: front50
                    volumeMounts:
                      - mountPath: /opt/spinnaker/lib/local-plugins
                        name: policy-engine-plugin-vol
                volumes:
                  - name: policy-engine-plugin-vol
                    emptyDir: {}
    gate:
      deployment:
        patchesStrategicMerge:
        - |
          spec:
            template:
              spec:
                initContainers:
                  - name: policy-engine-install
                    image: armory/policy-engine-plugin:0.1.6
                    imagePullPolicy: Always
                    args:
                      - -install-path
                      - /opt/policy-engine-plugin/target
                    volumeMounts:
                      - mountPath: /opt/policy-engine-plugin/target
                        name: policy-engine-plugin-vol
                containers:
                  - name: gate
                    volumeMounts:
                      - mountPath: /opt/spinnaker/lib/local-plugins
                        name: policy-engine-plugin-vol
                volumes:
                  - name: policy-engine-plugin-vol
                    emptyDir: {}
    igor: {}
    orca:
      deployment:
        patchesStrategicMerge:
        - |
          spec:
            template:
              spec:
                initContainers:
                  - name: policy-engine-install
                    image: armory/policy-engine-plugin:0.1.6
                    imagePullPolicy: Always
                    args:
                      - -install-path
                      - /opt/policy-engine-plugin/target
                    volumeMounts:
                      - mountPath: /opt/policy-engine-plugin/target
                        name: policy-engine-plugin-vol
                containers:
                  - name: orca
                    volumeMounts:
                      - mountPath: /opt/spinnaker/lib/local-plugins
                        name: policy-engine-plugin-vol
                volumes:
                  - name: policy-engine-plugin-vol
                    emptyDir: {}
    rosco: {}
  spinnakerConfig:
    config:
      artifacts: {}
      canary: {}
      ci: {}
      deploymentEnvironment: {}
      features:
        artifacts: true
      metricStores: {}
      notifications: {}
      persistentStorage:
        persistentStoreType: s3
        s3:
          accessKeyId: minio
          bucket: spinnaker
          endpoint: http://minio:9000
          pathStyleAccess: true
          region: us-west-2
          rootFolder: front50
          secretAccessKey: encrypted:k8s!n:spin-secrets!k:minioAccessKey
      providers:
        dockerRegistry:
          accounts:
          - address: https://index.docker.io
            cacheIntervalSeconds: 30
            cacheThreads: 1
            clientTimeoutMillis: 60000
            email: fake.email@spinnaker.io
            insecureRegistry: false
            name: dockerhub
            paginateSize: 100
            permissions: {}
            providerVersion: V1
            repositories:
            - library/nginx
            requiredGroupMembership: []
            sortTagsByDate: false
            trackDigests: false
          enabled: true
          primaryAccount: dockerhub
        kubernetes:
          accounts:
          - cacheThreads: 1
            cachingPolicies: []
            checkPermissionsOnStartup: true
            customResources: []
            dockerRegistries: []
            kinds: []
            liveManifestCalls: false
            name: spinnaker
            namespaces: []
            oAuthScopes: []
            omitKinds: []
            omitNamespaces: []
            onlySpinnakerManaged: false
            permissions: {}
            providerVersion: V2
            serviceAccount: true
          enabled: true
          primaryAccount: spinnaker
      pubsub: {}
      repository: {}
      security: {}
      spinnaker: {}
      timezone: America/New_York
      version: 2.21.4
    profiles:
      clouddriver:
        dualTaskRepository:
          enabled: false
          previousClass: com.netflix.spinnaker.clouddriver.data.task.jedis.RedisTaskRepository
          primaryClass: com.netflix.spinnaker.clouddriver.sql.SqlTaskRepository
        kubesvc:
          cluster: redis
        redis:
          cache:
            enabled: false
          enabled: true
          scheduler:
            enabled: true
          taskRepository:
            enabled: false
        serviceLimits:
          cloudProviderOverrides:
            aws:
              rateLimit: 10
          defaults:
            rateLimit: 10
          implementationLimits:
            AmazonAutoScaling:
              defaults:
                rateLimit: 10
            AmazonElasticLoadBalancing:
              defaults:
                rateLimit: 10
        spinnaker:
          extensibility:
            plugins:
              Armory.Kubesvc:
                enabled: true
              Armory.PolicyEngine:
                enabled: true
            pluginsRootPath: /opt/clouddriver/lib/plugins
        sql:
          cache:
            enabled: true
            readBatchSize: 500
            writeBatchSize: 300
          connectionPools:
            default:
              default: true
              jdbcUrl: jdbc:mysql://mysql:3306/clouddriver?useSSL=false&useUnicode=true&characterEncoding=utf8&connectionCollation=utf8mb4_unicode_ci
              password: encrypted:k8s!n:spin-secrets!k:mysqlCdPassword
              user: clouddriver_service
            tasks:
              jdbcUrl: jdbc:mysql://mysql:3306/clouddriver?useSSL=false&useUnicode=true&characterEncoding=utf8&connectionCollation=utf8mb4_unicode_ci
              password: encrypted:k8s!n:spin-secrets!k:mysqlCdPassword
              user: clouddriver_service
          enabled: true
          migration:
            jdbcUrl: jdbc:mysql://mysql:3306/clouddriver?useSSL=false&useUnicode=true&characterEncoding=utf8&connectionCollation=utf8mb4_unicode_ci
            password: encrypted:k8s!n:spin-secrets!k:mysqlCdMigratePassword
            user: clouddriver_migrate
          scheduler:
            enabled: false
          taskRepository:
            enabled: true
          unknown-agent-cleanup-agent:
            enabled: true
      deck:
        settings-local.js: |
          // If there is ANY kind of AuthN or AuthZ configured authEnabled should be set!
          // window.spinnakerSettings.authEnabled = true;                     // AuthN and AuthZ security/*.yml
          // window.spinnakerSettings.feature.functions = true                // AWS Lambda accounts/aws/patch-aws-lambda-plugin.yml
          // window.spinnakerSettings.feature.managedServiceAccounts = true;  // Enable Pipeline Permissions security/patch-external-authz.yml
          // window.spinnakerSettings.feature.terraform = true;               // Terraform UI armory/patch-terraformer.yml
          // window.spinnakerSettings.feature.quietPeriod = true;             // Enable Echo quiet period spinnaker_deployment/patch-echo-quiet.yml
          // The following flag added in 1.26 allows operators to enable making Infrastructure changes via the UI.
          //   For example, Undo Rollout. Previously users were always able to make infrastructure changes via the UI
          window.spinnakerSettings.kubernetesAdHocInfraWritesEnabled = true;
          // window.spinnakerSettings.notifications.email = window.spinnakerSettings.notifications.email || {};
          // window.spinnakerSettings.notifications.email.enabled = true;
      echo: {}
      front50:
        spinnaker:
          extensibility:
            plugins:
              Armory.PolicyEngine:
                enabled: true
          s3:
            enabled: false
        sql:
          connectionPools:
            default:
              default: true
              jdbcUrl: jdbc:mysql://mysql:3306/front50?useSSL=false&useUnicode=true&characterEncoding=utf8
              password: encrypted:k8s!n:spin-secrets!k:mysqlF50Password
              user: front50_service
          enabled: true
          migration:
            jdbcUrl: jdbc:mysql://mysql:3306/front50?useSSL=false&useUnicode=true&characterEncoding=utf8
            password: encrypted:k8s!n:spin-secrets!k:mysqlF50MigratePassword
            user: front50_migrate
      gate:
        spinnaker:
          extensibility:
            deck-proxy:
              enabled: true
              plugins:
                Armory.PolicyEngine:
                  enabled: true
                  version: 0.1.6
            plugins:
              Armory.PolicyEngine:
                enabled: true
      igor: {}
      orca:
        executionRepository:
          redis:
            enabled: false
          sql:
            enabled: true
        monitor:
          activeExecutions:
            redis: false
        spinnaker:
          extensibility:
            plugins:
              Armory.PolicyEngine:
                enabled: true
        sql:
          connectionPool:
            connectionTimeout: 5000
            jdbcUrl: jdbc:mysql://mysql:3306/orca?useSSL=false&useUnicode=true&characterEncoding=utf8
            maxLifetime: 30000
            maxPoolSize: 50
            password: encrypted:k8s!n:spin-secrets!k:mysqlOrcaPassword
            user: orca_service
          enabled: true
          migration:
            jdbcUrl: jdbc:mysql://mysql:3306/orca?useSSL=false&useUnicode=true&characterEncoding=utf8
            password: encrypted:k8s!n:spin-secrets!k:mysqlOrcaMigratePassword
            user: orca_migrate
      rosco: {}
      settings-local.js: {}
      spinnaker:
        armory:
          policyEngine:
            opa:
              baseUrl: http://opa:8181/v1/data
        spinnaker:
          extensibility:
            repositories:
              policyEngine:
                enabled: true
                url: https://raw.githubusercontent.com/armory-plugins/policy-engine-releases/master/repositories.json
      spinnakerconfig: {}
    service-settings:
      clouddriver:
        kubernetes:
          serviceAccountName: spin-sa
      echo: {}
      front50: {}
      gate: {}
      igor: {}
      orca: {}
      rosco: {}
      spinnaker: {}
  validation:
    providers:
      docker:
        enabled: true
      kubernetes:
        enabled: true
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: minio
  name: minio-pvc
  namespace: spinnaker
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: spinnaker
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
